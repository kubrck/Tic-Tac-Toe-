import javax.swing.JFrame;
import javax.swing.JOptionPane;

import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;




public class tictactoe extends JFrame implements ActionListener {

    public static final int BOARD_SIZE = 3;

    public enum GameStatus {
        INCOMPLETE, X_WINS, O_WINS, TIE
    }

    private JButton[][] buttons = new JButton[BOARD_SIZE][BOARD_SIZE];
    private boolean crossTurn = true;

    public tictactoe() {
        super.setTitle("TicTacToe");
        super.setSize(800, 800);
        GridLayout grid = new GridLayout(BOARD_SIZE, BOARD_SIZE);
        super.setLayout(grid);

        Font font = new Font("Comic Sans", Font.BOLD, 150);

        for (int row = 0; row < BOARD_SIZE; row++) {
            for (int col = 0; col < BOARD_SIZE; col++) {
                JButton button = new JButton("");
                buttons[row][col] = button;
                button.setFont(font);
                button.addActionListener(this);
                super.add(button);
            }
        }

        super.setResizable(false);
        super.setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        JButton clickedButton = (JButton) e.getSource();
        makeMove(clickedButton);
        GameStatus gs = this.getGameStatus();
        if (gs == GameStatus.INCOMPLETE) {
            return;
        }
        declareWinner(gs);

        int choice = JOptionPane.showConfirmDialog(this, "Do you want to restart the game?");
        if (choice == JOptionPane.YES_OPTION) {
            resetGame();
        } else {
            super.dispose();
        }
    }

    private void makeMove(JButton clickedButton) {
        String buttonText = clickedButton.getText();
        if (!buttonText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Invalid Move!");
        } else {
            clickedButton.setText(crossTurn ? "X" : "O");
            crossTurn = !crossTurn;
        }
    }

    private GameStatus getGameStatus() {
        // Check rows
        for (int row = 0; row < BOARD_SIZE; row++) {
            if (checkLine(buttons[row][0].getText(), buttons[row][1].getText(), buttons[row][2].getText())) {
                return buttons[row][0].getText().equals("X") ? GameStatus.X_WINS : GameStatus.O_WINS;
            }
        }

        // Check columns
        for (int col = 0; col < BOARD_SIZE; col++) {
            if (checkLine(buttons[0][col].getText(), buttons[1][col].getText(), buttons[2][col].getText())) {
                return buttons[0][col].getText().equals("X") ? GameStatus.X_WINS : GameStatus.O_WINS;
            }
        }

        // Check diagonals
        if (checkLine(buttons[0][0].getText(), buttons[1][1].getText(), buttons[2][2].getText()) ||
                checkLine(buttons[0][2].getText(), buttons[1][1].getText(), buttons[2][0].getText())) {
            return buttons[1][1].getText().equals("X") ? GameStatus.X_WINS : GameStatus.O_WINS;
        }

        // Check for tie
        for (int row = 0; row < BOARD_SIZE; row++) {
            for (int col = 0; col < BOARD_SIZE; col++) {
                if (buttons[row][col].getText().isEmpty()) {
                    return GameStatus.INCOMPLETE;
                }
            }
        }

        return GameStatus.TIE;
    }

    private boolean checkLine(String text1, String text2, String text3) {
        return !text1.isEmpty() && text1.equals(text2) && text2.equals(text3);
    }

    private void declareWinner(GameStatus gs) {
        String message = "";
        switch (gs) {
            case X_WINS:
                message = "X Wins!";
                break;
            case O_WINS:
                message = "O Wins!";
                break;
            case TIE:
                message = "It's a tie!";
                break;
        }
        JOptionPane.showMessageDialog(this, message);
    }

    private void resetGame() {
        for (int row = 0; row < BOARD_SIZE; row++) {
            for (int col = 0; col < BOARD_SIZE; col++) {
                buttons[row][col].setText("");
            }
        }
        crossTurn = true;
    }
}
